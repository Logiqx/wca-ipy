def startDatabase() {
    sh """docker run --rm logiqx/aws-cli ec2 start-instances \
                     --region ${MYSQL_REGION} --instance-ids ${MYSQL_INSTANCE}"""
    sh """docker run --rm logiqx/aws-cli ec2 wait instance-running \
                     --region ${MYSQL_REGION} --instance-ids ${MYSQL_INSTANCE}"""
    sh """docker run --mount type=bind,src=${MYSQL_CNF},dst=/home/mysql/.my.cnf \
                     --rm logiqx/mysql-client mysqladmin ping --wait \
                     --host=${MYSQL_HOST} --user=${MYSQL_USER} --connect_timeout=60"""
}

def stopDatabase() {
    sh """docker run --rm logiqx/aws-cli ec2 stop-instances \
                     --region ${MYSQL_REGION} --instance-ids ${MYSQL_INSTANCE}"""
    sh """docker run --rm logiqx/aws-cli ec2 wait instance-stopped \
                     --region ${MYSQL_REGION} --instance-ids ${MYSQL_INSTANCE}"""
}

def runPyScript(pyScript) {
    env.PROJECT_ROOT = "${USER_HOME}/work/${IMAGE_NAME}"
    sh """docker run --rm \
                     --mount type=bind,src=${MYSQL_CNF},dst=${USER_HOME}/.my.cnf \
                     --mount type=volume,src=wca_ipy_data,dst=${PROJECT_ROOT}/data \
                     -e MYSQL_HOST=${MYSQL_HOST} \
                     -e MYSQL_DATABASE=${MYSQL_DATABASE} \
                     -e MYSQL_USER=${MYSQL_USER} \
                     ${IMAGE_NAME} python/""" + pyScript
}

pipeline {
    agent any
    triggers {
        upstream(upstreamProjects: "wca-db-download-results,wca-ipy-create-fakes",
                 threshold: hudson.model.Result.SUCCESS)
    }
    options {
        lock label: 'DB+Data'
    }
    environment {
        IMAGE_NAME = 'wca-ipy'
        USER_HOME = '/home/jovyan'
        MYSQL_DATABASE = 'wca_ipy'
        MYSQL_USER = 'wca_ipy'
    }
    stages {
        stage('Start Database') {
            steps {
                startDatabase()
            }
        }
        stage('Format Extracts') {
            steps {
                runPyScript('Create_Extracts.py')
                runPyScript('Format_Extracts.py')
            }
        }
    }
    post {
        always {
            stopDatabase()
        }
        failure {
            emailext(
                to: "${EMAIL_RECIPIENTS}",
                subject: "Failed Build: ${currentBuild.fullDisplayName}.",
                body: """<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'</p>
                         <p>See attachment for console output or visit this
                            <a href=\"${env.BUILD_URL}\">link</a>.</p>""",
                attachLog: true
            )
        }
    }
}
